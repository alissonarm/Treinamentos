Cluster:
- 1 ou 2 máquinas trabalhando em paralelo dividindo o poder operacional;
- As máquinas dentro do cluster recebem denominação diferentes: 
  - MASTER (API, C-M, SCHED, ETCD): CONTROL PLANE
       - Responsavel por coordenar/gerenciar o cluster;
       - Manter e atualizar o estado desejado(estado do POD);
       - Receber e executar novos comandos;
  - NODE (KUBELET, K-PROXY): NODES
       - Executar os PODs que encapsulam o container;
       - Executar as aplicações;

kubernetes:
- Cria e gerencia o cluster;
- Gerencia containers;
- Faz a orquestração dos containers;
- É capaz de reiniciar aplicações automaticamente em caso de falhas;

Kubcectl: 
- Ferramenta que permite criar, ler, atualizar e remover os dados/componentes/recursos do cluster
  de maneira declarativa ou imperativa;
- Se comunica com a API que gerencia a comunicação com os recursos(POD, RS, DEPLOY, VOL);
- Envia Requests para API;

PODs:
- Estrutura que pode encapsular um ou mais container no kubernetes;
- São efêmeros;
- Compartilham namespaces de rede e IPC;
- Podem compartilhar volumes;
- A comunicação entre containers do mesmo POD é feita via Localhost. 
- Um POD é dado como encerrado quando todos os containes dentro do pod param de funcionar. 

SERVICE (SVC)
- Abstrações que expõe as aplicações executando em um ou mais pods.
- Proveem IPs fixos para comunição;
- Proveem um DNS estáveis para um ou mais pods;
- São capazes de fazer balanceamento de carga.
- Tipos de SVC:
  - ClusterIP: Apenas para comunicação interna do cluster;
  - NodePort: Permitem a comunição com o mundo externo ao cluster;
  - LoadBalancer: Abre comunicação para o mundo externo usando o Load Balancer do provedor;

CONFIG MAP(CM)
- Responsavel por armazenar informações de configurações; 
- Permite a reutilização e o desacoplamento;

REPLICA SET(RS)
- Estrutura que pode encapsular 1 ou mais PODs.

DEPLOYMENT
- Uma camada acima do Replica Set
- Permite o controle de versionamento das imagens e pods.

VOLUMES(vol)
- Compartilha dados entre Containers;
- Possuem ciclos de vida independentes dos containers. Porém, são dependentes dos pods. 

Persistent Volumes(PV)
- Resource independente do POD responsável por abstrair como o cloud provider armazena  os dados.
- PersistentVolumes persistem dados de pods como um todo
- PersistentVolumes possuem ciclo de vida independente de quaisquer outros recursos, inclusive pods

Persistent Volumes Claims(PVC)
- Serve como passaporte para o POD acessar o PV
- Que precisamos de um PersistentVolumeClaim para acessar um PersistentVolume


STORAGE CLASSES (SC)
- Criam PV dinâmicamente conforme demanda.
- Também são capazes de criar discos de armazenamento.
- 

STATEFUL SET (SS)
- Podem ser usados quando estados devem ser persistidos. 
- Usam PV e PVC para persistência de dados.

PROBES
- Tornar visível ao Kubernetes que uma aplicação não está se comportando da maneira esperada.

HORIZONTAL POD AUTOSCALER(HPA)


=============================================================
Comandos:
=============================================================
1) kubectl get nodes : lista os nodes 
   kubectl get pods -o wide  :

2) kubectl run nginx-pod --image=nginx:latest
criar um pod:  
- nome: nginx-pod
- nome da imagem do container: nginx
- versao: latest

3) kubectl get pods 
:=> para listar os pods;

4) kubectl get pods --watch 
:=> permite acompanhar as mudanças da situação dos pods 

5) kubectl get pods -o wide
:=> formata a saida de maneira wide

6) kubectl describe pod nginx-pod 
:=> descreve informações do pod

7) kubectl edit pod nginx-pod 
:=> permite editar informações do pod nginx-pod

8) kubectl apply -f .\primeiro-pod.yaml
:=> criação de pod via arquivo(primeiro-pod.yaml)
 
9) kubectl delete pod nginx-pod 
:=> deletar o pod nginx-pod 

10) kubectl delete -f .\primeiro-pod.yaml
:=> deletar o pod criado via arquivo

11) kubectl delete pods --all
:=> deletar todos os pods em execução

12) kubectl exec -it portal-noticias -- bash
:=> abre um terminal dentro do pod portal-noticias 

13) kubectl get svc
    kubectl get service
:=> retornam os serviços criados

14) kubectl delete svc --all
:=> deletar todos os serviços em execução

15) kubectl get rs
:=> Listar os replicaset ativos

16) kubectl get deployments
:=> Listar os deployments ativos

17) kubectl rollout history deployment ngnix-deployment
:=> apresenta o histórico das alterações 

18) kubectl annotate deployment nginx-deployment kubernetes.io/change-cause="Definindo a imagem com versao latest"
:=> fazendo uma anotação 

19) kubectl rollout undo deployment nginx-deployment --to-revision=2
:=> voltar para uma versao especifica

20) kubectl delete deployment nginx-deployment
:=> deletar deployment chamado nginx-deployment

21) kubectl delete -f .\portal-noticias-replicaset.yaml
:=> deletar via arquivo o replicaset

22) kubectl exec -it pod-volume --container nginx-container -- bash
:=> executar em modo iterativo o container nginx-container